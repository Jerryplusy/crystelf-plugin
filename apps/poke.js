import cfg from '../../../lib/config/config.js';
import tool from '../components/tool.js';
import axios from 'axios';
import configControl from '../lib/config/configControl.js';

const replyText = configControl.get('poke')?.replyText;
const replyVoice = configControl.get('poke')?.replyVoice;
const mutePick = configControl.get('poke')?.mutePick;
const muteTime = configControl.get('poke')?.muteTime;

export default class ChuochuoPlugin extends plugin {
  constructor() {
    super({
      name: 'Êà≥‰∏ÄÊà≥',
      dsc: 'ÂñúÊ¨¢Êà≥È∏°Ê∞î‰∫∫',
      event: 'notice.group.poke',
      priority: -114510,
      rule: [
        {
          fnc: 'chuoyichuo',
        },
      ],
    });
  }

  async chuoyichuo(e) {
    if (cfg.masterQQ.includes(e.target_id) && e.operator_id !== e.target_id) {
      return await pokeMaster(e);
    }

    if (cfg.masterQQ.includes(e.operator_id)) {
      return await masterPoke(e);
    }

    if (e.target_id === e.self_id) {
      return await handleBotPoke(e);
    }
  }
}

async function pokeMaster(e) {
  logger.info('Ë∞ÅÊà≥‰∏ª‰∫∫‰∫Ü...');
  if (cfg.masterQQ.includes(e.operator_id) || e.self_id === e.operator_id) {
    return;
  }
  await e.reply(`Â∞èÂòøÂ≠ê‰∏çËÆ∏Êà≥ÔºÅ`);
  await tool.sleep(1000);
  await e.bot.sendApi('group_poke', { group_id: e.group_id, user_id: e.operator_id });
  return true;
}

async function masterPoke(e) {
  logger.info(`Ë∑ü‰∏ª‰∫∫‰∏ÄËµ∑Êà≥ÔºÅ`);
  if (e.target_id !== e.uin) {
    await e.bot.sendApi('group_poke', {
      group_id: e.group_id,
      user_id: e.target_id,
    });
  }
  return true;
}

async function handleBotPoke(e) {
  const randomNum = Math.random();

  if (randomNum < replyText) {
    try {
      const res = await axios.get(
        `${configControl.get(`coreConfig`)?.coreUrl}/api/words/getText/poke`
      );
      if (res.data?.success) {
        return await e.reply(res.data.data);
      } else {
        return await e.reply(`Êà≥‰∏ÄÊà≥Âá∫Èîô‰∫Ü!${configControl.get('nickName')}‰∏çÁü•ÈÅìËØ•ËØ¥Âï•Â•Ω‰∫Ü..`);
      }
    } catch (err) {
      logger.error('Êà≥‰∏ÄÊà≥ËØ∑Ê±ÇÂ§±Ë¥•', err);
      return await e.reply(`Êà≥‰∏ÄÊà≥Âá∫Èîô‰∫Ü!${configControl.get('nickName')}‰∏çÁü•ÈÅìËØ•ËØ¥Âï•Â•Ω‰∫Ü..`);
    }
  }

  if (randomNum < replyText + replyVoice) {
    try {
      const res = await axios.get(
        `${configControl.get(`coreConfig`)?.coreUrl}/api/words/getText/poke`
      );
      if (res.data?.success) {
        const message = res.data.data.toString();
        //let message = cleanText(res.data.data.toString());
        //logger.info(message);
        return await e.bot.sendApi('get_ai_record', {
          group_id: e.group_id,
          character: 'lucy-voice-hoige',
          text: message,
        });
      }
    } catch (err) {
      logger.error('ËØ≠Èü≥ÁîüÊàêÂ§±Ë¥•', err);
      return await e.reply(`Êà≥‰∏ÄÊà≥Âá∫Èîô‰∫Ü!${configControl.get('nickName')}‰∏çÁü•ÈÅìËØ•ËØ¥Âï•Â•Ω‰∫Ü..`);
    }
  }

  if (randomNum < replyText + replyVoice + mutePick) {
    let mutetype = Math.ceil(Math.random() * 4);

    const botInfo = await Bot.pickMember(e.group_id, e.bot.uin).getInfo();
    const isAdmin = botInfo.role === 'admin' || botInfo.role === 'owner';
    if (!isAdmin) mutetype = 5;

    switch (mutetype) {
      case 1:
        await e.reply('ÊàëÁîüÊ∞î‰∫ÜÔºÅÁ†∏ÊåñÊí∏Â§ö!Êú®Â§ßÔºÅÊú®Â§ßÊú®Â§ßÔºÅ');
        await tool.sleep(1000);
        return await tryMute(e, 60 * muteTime);
      case 2:
        await e.reply('‰∏çÔºÅÔºÅ');
        await tool.sleep(1000);
        await e.reply('ÂáÜÔºÅÔºÅ');
        await tool.sleep(1000);
        await e.reply('Êà≥ÔºÅÔºÅ');
        await tool.sleep(1000);
        await tryMute(e, 60 * muteTime);
        await tool.sleep(1000);
        return await e.reply('ÔºÅÔºÅ');
      case 3:
        await e.reply('ÂêÉÊàë10068Êã≥ÔºÅ');
        await tool.sleep(1000);
        await e.bot.sendApi('group_poke', { group_id: e.group_id, user_id: e.operator_id });
        await tryMute(e, 60 * muteTime);
        return;
      case 4:
        await e.reply('ÂìºÔºåÊàëÂèØÊòØ‰ºöËøòÊâãÁöÑÂì¶‚Äî‚Äî');
        await tool.sleep(1000);
        await e.bot.sendApi('group_poke', { group_id: e.group_id, user_id: e.operator_id });
        return await tryMute(e, 60 * muteTime);
      case 5:
        await e.reply('ÂìºÔºåË¶Å‰∏çÊòØÊàë‰∏çÊòØÁÆ°ÁêÜÔºåÊó©üà≤Áõê‰Ω†‰∫ÜÔºÅ');
        await tool.sleep(1000);
        return await e.bot.sendApi('group_poke', { group_id: e.group_id, user_id: e.operator_id });
    }
  }

  const returnType = Math.round(Math.random() * 3);
  const replies = [
    'ÂêÉÊàë‰∏ÄÊã≥ÂñµÔºÅ',
    '‰Ω†ÂàöÂàöÊòØ‰∏çÊòØÊà≥Êàë‰∫ÜÔºå‰Ω†ÊòØÂùèËõãÔºÅÊàëË¶ÅÊà≥ÂõûÂéªÔºåÂìºÔºÅÔºÅÔºÅ',
    'ÊòØ‰∏çÊòØË¶ÅÊú¨ËêùËéâÊèç‰Ω†‰∏ÄÈ°øÊâçÂºÄÂøÉÂïäÔºÅÔºÅÔºÅ',
  ];
  if (replies[returnType]) {
    await e.reply(replies[returnType]);
    await tool.sleep(1000);
    return await e.bot.sendApi('group_poke', { group_id: e.group_id, user_id: e.operator_id });
  }
}

function cleanText(inputText) {
  return inputText.replace(/[^\w\s,.!?]/g, '');
}

async function tryMute(e, duration) {
  try {
    await e.group.muteMember(e.operator_id, duration);
  } catch (err) {
    logger.warn(`Á¶ÅË®ÄÂ§±Ë¥•: ${err}`);
    await e.reply('Ê∞îÊ≠ªÊàë‰∫ÜÔºÅÁ¶ÅË®Ä‰∏ç‰∫Ü‰Ω†');
  }
}
